/*
 * Copyright 2018 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.iksgmbh.sysnat.language_templates.fakecompositeapp;

import java.util.*;

import com.iksgmbh.sysnat.*;
import com.iksgmbh.sysnat.annotation.*;
import com.iksgmbh.sysnat.common.exception.*;
import com.iksgmbh.sysnat.common.utils.SysNatConstants.GuiType;
import com.iksgmbh.sysnat.guicontrol.GuiControl;
import com.iksgmbh.sysnat.guicontrol.impl.*;
import com.iksgmbh.sysnat.language_templates.LanguageTemplateBasics.PageChangeEvent.EventType;
import com.iksgmbh.sysnat.language_templates.*;
import com.iksgmbh.sysnat.language_templates.fakecompositeapp.*;
import com.iksgmbh.sysnat.language_templates.testapp1.*;
import com.iksgmbh.sysnat.language_templates. testapp2.*;
import com.iksgmbh.sysnat.common.utils.SysNatConstants.ApplicationLoginParameter;

/**
 * Implements all Natural Language instructions specific to FakeCompositeApp.
 * Some common instructions are available from the parent class.
 */
@LanguageTemplateContainer
public class LanguageTemplatesBasics_FakeCompositeApp extends LanguageTemplateBasics
{
    private static boolean firstInstance = true;
    enum APP {TestApp1, TestApp2};

    private LanguageTemplatesBasics_TestApp1 languageTemplatesBasics_TestApp1;
    private LanguageTemplatesBasics_TestApp2 languageTemplatesBasics_TestApp2;
    private APP applicationInFocus;

   public LanguageTemplatesBasics_FakeCompositeApp(ExecutableExample anXX) 
	{
		this.executableExample = anXX;
		this.executionInfo = ExecutionRuntimeInfo.getInstance();
        this.languageTemplatesBasics_TestApp1 = new LanguageTemplatesBasics_TestApp1(executableExample);
        this.languageTemplatesBasics_TestApp2 = new LanguageTemplatesBasics_TestApp2(executableExample);
		
		if (firstInstance) {
			firstInstance = false;
			switchApp(ExecutionRuntimeInfo.getInstance().firstElementApplication());
		} else {
			findCurrentAppInFocus();
		}
	}

	private void findCurrentAppInFocus()
	{
		HashMap<String,GuiControl> guiControllerMap = ExecutionRuntimeInfo.getInstance().getGuiControllerMap();
		for (String key : guiControllerMap.keySet()) {
			if (guiControllerMap.get(key) == executableExample.getActiveGuiController()) {
				switchApp(key);
				return;
			}
		}
		
		throw new SysNatException("Application in focus not found!");
	}

	private APP toApp(String appName) 
	{
		APP[] values = APP.values();
		for (APP app : values) {
			if (app.name().equals(appName)) {
				return app;
			}
		}
		throw new RuntimeException("Unknown application: " + appName);
	}


	//##########################################################################################
	//                       I N T E R F A C E    M E T H O D S
	//##########################################################################################
	
	@Override
	public void doLogin(final Map<ApplicationLoginParameter,String> loginParameter) {
		// no implementation needed here 
	}

	@Override
    public void doLogout() {
		// no implementation needed here 
    }
    
	@Override
	public boolean isLoginPageVisible() {
		return false;
	}

	@Override
	public boolean isStartPageVisible() {
		return false;
	}

	@Override
	public void gotoStartPage() 
	{
		if (applicationInFocus == APP.TestApp1) {
			languageTemplatesBasics_TestApp1.gotoStartPage();
		} else {
			languageTemplatesBasics_TestApp2.gotoStartPage();
		}
	}
	
	@LanguageTemplate(value = "Wechsle zur Anwendung ^^.")
	@LanguageTemplate(value = "Switch to application ^^.")
	public void switchApp(String appName)
	{
		applicationInFocus = toApp(appName);
		boolean switched = executableExample.setActiveGuiControllerFor(appName);
		if (switched) {
			executableExample.getActiveGuiController().windowToFront();
			executableExample.addReportMessage("The application <b>" + appName + "</b> is now focused.");
		}
	}		
	
	//###########################################################################################
	//!                   L A N G U A G E   T E M P L A T E    M E T H O D S                    !
	//!   see code below this comment can be generated by class CompositeLanguageTemplateJoiner !
	//###########################################################################################


	@LanguageTemplate(value = "Click menu item ^^.")
	public void clickMainMenuItem(final String mainMenuItem) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.clickMainMenuItem(mainMenuItem);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.clickMainMenuItem(mainMenuItem);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Click button ^^.")
	public void clickButton(String buttonName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.clickButton(buttonName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.clickButton(buttonName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "In Dialog ^^ click button ^^.")
	public void clickDialogButton(String dialogName, String buttonName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.clickDialogButton(dialogName, buttonName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.clickDialogButton(dialogName, buttonName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Click link ^^.")
	@LanguageTemplate(value = "Enter ^^ in textfield ^^.")
	public void enterTextInField(String valueCandidate, String fieldName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.enterTextInField(valueCandidate, fieldName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.enterTextInField(valueCandidate, fieldName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Enter ^^ in textarea ^^.")
	public void enterTextInTextarea(String valueCandidate, String fieldName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.enterTextInTextarea(valueCandidate, fieldName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.enterTextInTextarea(valueCandidate, fieldName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Select ^^ in box ^^.")
	public void chooseInCombobox(String valueCandidate, String fieldName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.chooseInCombobox(valueCandidate, fieldName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.chooseInCombobox(valueCandidate, fieldName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Click radiobutton ^^.")
	public void clickRadioButton(String radioButtonName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.clickRadioButton(radioButtonName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.clickRadioButton(radioButtonName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Tick checkbox ^^.")
	public void ensureCheckboxIsTicked(String checkBoxDisplayName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.ensureCheckboxIsTicked(checkBoxDisplayName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.ensureCheckboxIsTicked(checkBoxDisplayName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Tick checkbox ^^ if ^^=^^.")
	public void tickCheckboxForCondition(String checkBoxDisplayName, String actual, String expected) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.tickCheckboxForCondition(checkBoxDisplayName, actual, expected);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.tickCheckboxForCondition(checkBoxDisplayName, actual, expected);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Untick checkbox ^^.")
	public void ensureCheckboxIsUNticked(String checkBoxDisplayName) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.ensureCheckboxIsUNticked(checkBoxDisplayName);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.ensureCheckboxIsUNticked(checkBoxDisplayName);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Is the displayed text ^^ equal to ^^?")
	public void isTextDislayed(final String guiElementToRead, final String valueCandidate) 
	{
		if (applicationInFocus == APP.TestApp1) languageTemplatesBasics_TestApp1.isTextDislayed(guiElementToRead, valueCandidate);
		else if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.isTextDislayed(guiElementToRead, valueCandidate);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

	@LanguageTemplate(value = "Login with ^^, ^^.")
	public void loginWith(String username, String password)
	{
		if (applicationInFocus == APP.TestApp2) languageTemplatesBasics_TestApp2.loginWith(username, password);
		else throw new RuntimeException("Unsupported application: " + applicationInFocus);
	}

}