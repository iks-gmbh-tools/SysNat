/*
 * Copyright 2018 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.iksgmbh.sysnat.helper;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import com.iksgmbh.sysnat.ExecutionRuntimeInfo;
import com.iksgmbh.sysnat.common.utils.SysNatConstants;
import com.iksgmbh.sysnat.common.utils.SysNatFileUtil;
import com.iksgmbh.sysnat.common.utils.SysNatStringUtil;
import com.iksgmbh.sysnat.domain.TestApplication;

/**
 * Generates necessary maven dependencies required for the current application under test 
 * and injects them into the pom file of the sysnat.test.execution project.
 * 
 * @author Reik Oberrath
 */
public class PomFileDependencyInjector 
{
	//private static final ResourceBundle ERR_MSG_BUNDLE = ResourceBundle.getBundle("bundles/ErrorMessages", Locale.getDefault());
	private static final String POM_DEPENDENCIES_START = "<!--  Start of autogenerated dependencies that are test application specific -->";
	private static final String POM_DEPENDENCIES_END = "<!--  End of autogenerated dependencies that are test application specific -->";

	/**
	 * Reads natural language instruction files and transforms the instructions given in a domain language
	 * into java commands of JUnit java files.
	 * @param appNames
	 * @return true if JUnit test classes has been generated
	 */
	public static boolean doYourJob(List<String> fingAppsToStart) {
		return new PomFileDependencyInjector().injectMavenDependencies(fingAppsToStart);
	}

	protected boolean injectMavenDependencies(List<String> fingAppsToStart) 
	{
		// step 0: init
		final List<String> linesToInject = new ArrayList<>();
		
		for (String app : fingAppsToStart) 
		{
			linesToInject.add("    <!-- Dependencies for test application " + app + "-->");
			linesToInject.add("");
			
			// step 1: find required class files
			TestApplication testApplication = new TestApplication(app);
			List<File> jars = findJars(testApplication.getStartParameterValues());

			// step 2: convert to maven dependency sections
			List<String> applicationSpecificDependencies = jars.stream().flatMap(jar -> toMavenDependency(jar).stream()).collect(Collectors.toList());
			linesToInject.addAll(applicationSpecificDependencies);
			linesToInject.add("");
		}

		// step 3: inject in pom
		injectInPomFile(linesToInject);
		
		return true;
	}

	private void injectInPomFile(List<String> applicationSpecificDependencies)
	{
		String targetDir = System.getProperty("sysnat.generation.target.dir");
		File pomFile = new File(targetDir + "/../../../pom.xml");
		
		if (! pomFile.exists()) {
			System.err.println("Required file not found: " + pomFile.getAbsolutePath());
			throw new RuntimeException("Required file not found: " + pomFile.getAbsolutePath());
		}
		
		List<String> newContent = buildNewContent(applicationSpecificDependencies, pomFile);
		SysNatFileUtil.writeFile(pomFile, newContent);
	}

	private List<String> buildNewContent(List<String> applicationSpecificDependencies, File pomFile)
	{
		final List<String> toReturn = new ArrayList<>();
		
		if (pomFile.exists()) 
		{
			List<String> content = SysNatFileUtil.readTextFile(pomFile);
			boolean isInjectionLine = false;
			for (String line : content) 
			{
				if (line.contains(POM_DEPENDENCIES_START)) {
					isInjectionLine = true;
					toReturn.add(line);
					toReturn.addAll(buildMavenDependencyLines(applicationSpecificDependencies));
				} else if (line.contains(POM_DEPENDENCIES_END)) {
					isInjectionLine = false;
					toReturn.add(line);
				} else {
					if ( ! isInjectionLine ) {
						toReturn.add(line);
					}
				}
			}
		}
		
		return toReturn;
	}

	private List<String> buildMavenDependencyLines(List<String> applicationSpecificDependencies)
	{
		final List<String> toReturn = new ArrayList<>();
		toReturn.add(System.getProperty("line.separator"));
		toReturn.addAll(applicationSpecificDependencies);
		toReturn.add(System.getProperty("line.separator"));
		return toReturn;
	}

	private List<String> toMavenDependency(File jar)
	{
		final List<String> toReturn = new ArrayList<>();
		
		toReturn.add("    <dependency>");
		toReturn.add("        <groupId>" + ExecutionRuntimeInfo.getInstance().getTestApplicationName() + "</groupId>");
		toReturn.add("        <artifactId>" + extractArtefaktName(jar.getName()) + "</artifactId>");
		toReturn.add("        <version>" +  extractArtefaktVersion(jar.getName()) + "</version>");
		toReturn.add("        <scope>system</scope>");
		toReturn.add("        <systemPath>" + jar.getAbsolutePath() + "</systemPath>");
		toReturn.add("    </dependency>");
		toReturn.add("");
		
		return toReturn;
	}

	private String extractArtefaktVersion(String name)
	{
		int pos1 = name.lastIndexOf("-");
		int pos2 = name.lastIndexOf(".");
		if (pos1 == -1 || pos2 == -1) return "0";
		return name.substring(pos1+1, pos2);
	}

	private String extractArtefaktName(String name)
	{
		int pos = name.lastIndexOf("-");
		if (pos == -1) pos = name.lastIndexOf(".");
		if (pos == -1) pos = name.length()-1;
		return name.substring(0, pos);
	}

	private List<File> findJars(HashMap<String, String> parameters)
	{
		final List<File> toReturn = new ArrayList<>();
		String installDir = parameters.get(SysNatConstants.SwingStartParameter.InstallDir.name());
		String libDirs = parameters.get(SysNatConstants.SwingStartParameter.LibDirs.name());
		
		if (libDirs != null) 
		{
			List<String> dirs = SysNatStringUtil.toList(libDirs, ",");
			for (String dir : dirs) 
			{
				dir = (installDir + "/" + dir).replaceAll("\"", "");
				File directory;
				if (dir.startsWith("C:")) {
					directory = new File("", dir.substring(3));
				} else {
					directory = new File(dir);
				}
				
				if (directory.exists()) 
				{
					File[] files = directory.listFiles(new FileFilter() {
						@Override public boolean accept(File pathname) {
							return pathname.getAbsolutePath().endsWith(".jar");
						}
					});
					for (File file : files) {
						toReturn.add( file );
					}
				} else {
					System.err.println("Warning: directory '" + directory.getAbsolutePath() + "' not found.");
				}
			}
		}
			
		return toReturn;
	}


}